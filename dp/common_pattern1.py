

def dna_longgest_shared_pattern_length(word1, word2):
    word1_length = len(word1)
    word2_length = len(word2)
    dp = [[0] * (word2_length + 1) for _ in range(word1_length + 1)]
    for i in range(word1_length):
        for j in range(word2_length):
            if word1[i] == word2[j]:    # 추가 후 마지막 글자가 같을 때
                dp[i + 1][j + 1] = dp[i][j] + 1
            else:                       # 추가 후 마지막 글자가 다를 때
                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])

    return dp[word1_length][word2_length]



def main():
    testcases = [('CTAC', 'CACG'), ('CCCAGCGTCGAAACCGCTGC', 'ACACGGATGCCTGTTATGAT'), ('CAACCACAAC', 'C'), ('AATGATGCTC', ''), ('TCTCTCATCAACAACGGGGTTGACCAAACGGGCAGTGTGGTGTTCAAAGCCGACTTATAGCCTACATGACTTAGCTTGCTATTACGTTGCATTTCCACGGAAACCCGAAAGCAGGGTCAGAGCCTCGCTGATCCACCCACTAACTATATCGCCCTTCCTCAGTCATGCTCCCGCGCAAAGAGGGGCTCTCAAGGTGTTCGTAGGTTGGCCGCCCTTGTGCTCTGAGGCCTAGTAAGAGGGTATCACGTTGCGCAGCAAGGCAAAGGGGCTACCGTGAACGCAGCTATGGGATGTGCAAAACGTGATGACTAGCGTCGCGTTAGTGCTTCCAGCATAAGTCCGAGCCAGGCCGCCTAGACATGGTTACTGTTGACTTGGTCCCCTTTTGTTAAGGTGCACAATCGACAACGGGTGGTCGGCCATCTCTTGCATAGGTCGGAGTTAAAGGACCGCGAACTGGCCCTCTACGTTTTTGTCACGCGGAGTGGCGCATTAAGATA', 'CCTACTTCTTAAGGCCGGTAGTGAAGTTCACAATATGTGTTTCTACCTATTACCCAAGGTGCGAGGGTTTTGATCGGGTGTGTTTTAGGCCTATTTAACTCCATCCGGCGAGTCACGTGGTCCGCTCATGTAGTGCTTACGGGGATCGGGTGGGGTAATAGTAGCGACGATTGTGCTTAGCCCGAGCGTGAAACTGCCAATATCGATGAACGATCTGAAATACACGTTGAATTGAAGCCGCTAGTGGTTCCATCGAATAGTCCTAGGGATGAATAGATATGGGGTTACAAAGAACCCACGGCTCAGGCTGGACATTAACAGCGAGTCGCTTCTACAGAGGGCGTTCATCAACGCGGGTTTAAGATATCCCATTGGGGTCGTGACGTGTCCTCGCCCAATGCGCGACTCGATCCATACGTAGACTATTACAACGGCGTGGAATCTTAAAATTCGAAGTATCGGGACCGGCGGACGCATGCGTAATTTGTCGCCTCGAGAGG'), ('GGTTCACTGGACACCTATCAAGGGAACTTGTTTCGGTGCTACATGATGTGCACTACTCCTATTACATTCGTTCTTCTTAAGAAACAACAGTGTTGCATGGCTATGACGGCCGTATAACTCCCCAGGTAGCTGAGGCATACAGGCTCGGAGGAGGGTCATGCATCATGTGTTGTCAAACCTGTCGTGTAGACAAGCTCCGGAGAGCGATGAGGTGGGGAAAGGCTAATGAAGGTTCTATTGTTTCTATATGGTGCGCCATAGATCTATGTTTTAGGGTCCGCACTACTCGCATATGCCCACTGGCAGAAATAGCAGGGCTTGCGGGCTAAATTCCCTGCACCGAAAACAGCCATCCCCCAGATCAGTGTCGATCGCACCTGCCAATTATTGACTTTCAGTGGCTAGATCAATCTTCGAAACCAAACATTTGCTACGACGGATCGGAGCTTGTTACTGCACGACAGACGGGGCACACTATGTCGGTTCCTTGCACCTCCGGAGTCAAGGCCTGGAAAATCGCAATTCGGACCGAGATAATATTCGATCGCCTACATAGAATTGAATCGTGATGACATCGTGGACCTTGACGCTACTACTTTA', 'TGGACGTGTGTAGCTTTATCGCCTTTCGACAAAAAAAACTCATTGGTCATGTACGTTCGACTCCTGGGTCACGCTTCATCTTGAGGTTCAAAATTAGTGTAGACCCTCTAGCAACTTCGCACATCTCTCCAGATCGGTTCCTATAAAATATGTGGCTTGGGATGAGGTGAAGCCGGGTGCCGGGTGCATGTGAATACGCTGATAATCCGGAGGGGCTATACCGGCGCAGCTACTCGCCAACGCACTCCTAGTCCCCTTGGGAGTTGAGGGCACCTGACGTGTGGTGACACAGTCGAGGTT')]
    for i, tc in enumerate(testcases):
        word1, word2 = tc
        print(f"Testcase {i + 1}의 가장 긴 공통 부분 문자열의 길이 : {dna_longgest_shared_pattern_length(word1, word2)}")
        print()

if __name__ == '__main__':
    main()