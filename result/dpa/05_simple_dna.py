import time

def execute_time(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f"수행 시간: {end - start} 초")
        return result
    return wrapper

@execute_time
def dna_break_topdown_wrapper(sequence, patterns):
    return dna_break_topdown(sequence, patterns)
def dna_break_topdown(sequence, patterns):
    for pattern in patterns:
        if pattern == sequence:
            return True
        if pattern == sequence[:len(pattern)]:
            result = dna_break_topdown(sequence[len(pattern):], patterns)
            if result:
                return True
    return False

@execute_time
def dna_break_bottomup(sequence, patterns):
    sequence_length = len(sequence)
    dp = [False] * (sequence_length + 1)
    dp[0] = True
    for i in range(1, sequence_length + 1):
        for j in range(i):
            if dp[j] and sequence[j:i] in patterns:
                dp[i] = True
                break
    return dp[sequence_length]

def main():
    patterns = ['CTAG', 'GCC', 'CTA']
    test1 = "CTAG"
    test2 = "CCCCCCCCCC"
    test3 = "GCCCTACTAG"
    test4 = "GTTTCAGGGA"
    test5 = "CTAGCTAGCC"
    test6 = "CTACTAGCTAGCC"
    test7 = "ACCAGAGTCTCTCCTCTTAC"
    test8 = "GCCCTACTAGCCCTAGCTAGCCCTAGGCCCTAGCCCTAGCCGCCGCCCTACTAGCCCTACTA"
    test9 = "GCCCTAGCTAGCTAGCCGCCGCCCTACTACTAGCCGCCGCCTAGCCGCCCTACTACTAGGCCCTAG"
    test10 = "CTAGCTACTACTAGCTAGCTAGCTAGCTAGCTACTAGCTACTAGCTAGCCCTAGCTACTAGCTAGCTAGCTAGCTAGGCCGCCCTAGCTAGGCCGCCCTAGCTAGCTAGGCCGCCCTAGCTAGGCCGCCCTAGCTAGCTAGCTACTAGCTACTAGCTAGCCGCCCTAGCCCTACTAG"
    test11 = "GCCCTAGCTACTAGCTAGCTAGCCGCCCTACTAGGCCGCCCTACTACTAGGCCGCCGCCCTAGCTAGGCCGCCCTACTAGCTACTAGCTAGCTACTAGCTACTAGCTACTAGGCCGCCCTACTAGGCCCTACTAGGCCCTAGCCGCCCTAGCTAGGCCGCCCTACTAGGCCCTACTACTAGGCCCTAGCTACTAGCTAGGCCCTAGGCCGCCCTAGGCCCTACTACTACTAGCCGCCGCCCTACTAGGCCCTACTACTAGCCCTAGGCCCTAGCTAGCTACTAGCCGCCCTAGCTAGGCCGCCGCCGCCCTAGGCCGCCCTAGCCGCCCTACTACTACTACTAGCTACTACTAGCTAGCTACTAGCTACTAGGCCGCCGCCGCCCTACTAGGCCCTACTAGCTACTAGCCCTACTACTACTACTAGCCGCCGCCCTAGCTAGCCGCCCTAGGCCCTACTACTACTAGCCGCCCTAGGCCCTACTAGCCCTAGGCCCTAGCCCTAGCTAGCCCTAGCTAGCTAGCCGCCCTACTACTAGCTACTAGCTAGCTAGCTAGGCCCTAGCTAGGCCGCCGCCCTAGGCCCTACTAGCTAGCCGCCCTACTAGGCCGCCCTAGCTAGCCCTAGCCCTAGCCGCCCTAGCTAGCTACTAGCCCTACTAGCTAGCTAGCCCTACTAGCTACTAGCTAGCCCTACTACTAGCCCTACTAGCTACTACTAGCCCTAGGCCCTAGGCCCTAGCTACTACTAGGCCGCCGCCCTACTAGCCGCCGCCCTAGGCCCTACTACTAGGCCGCCGCCCTAGCTAGCCCTAGGCCCTAGCTAGGCCCTAGCCCTACTAGGCCCTAGCTAGCTAGCTAGGCCGCCCTAGCTAGCTAGCCGCCGCCGCCCTAGCCCTAGGCCCTAGCTAGCCGCCGCCCTAGCCCTAGCCGCCCTACTAGCTAGCTACTACTAGCTAGCTACTAGCTACTAGCTAGCCCTAGCCCTAGGCCGCCGCCGCCCTAGCCCTACTACTACTAGCCCTAGGCCCTACTAGCTAGGCCGCCCTAGCCCTAGCTAGCTAGCTAGCTACTACTAGGCCCTAGCTAGCCCTAGGCCGCCCTACTAGCTAGCTACTAGCTAGCTAGCTAGCCGCCCTAGGCCGCCCTAGCCCTAGGCCGCCGCCCTACTACTAGCCCTACTACTAGCTACTAGCTAGCTACTAGCTAGCTAGGCCCTACTAGCTACTAGCCCTAGCTAGCTAGCCCTAGCTAGGCCCTAGCCCTACTAGCCGCCCTAGCCGCCCTACTAGGCCGCCCTAGCTACTAGCTAGCTACTACTAGCCCTAGCCGCCGCCGCCCTACTAGCTAGGCCGCCGCCGCCCTAGCTAGCCCTACTAGCTAGCTAGCTAGCTAGCTAGGCCGCCCTAGCTAGCCCTACTAGCTACTAGGCCCTAGCTACTAGCCCTAGGCCCTACTACTAGCTACTAGCTAGCCCTACTAGCTAGCTAGCCCTAGCTACTAGGCCCTACTAGCTAGCTAGCCCTACTAGCTAGCTACTAGCCCTAGCTAGCTACTAGCCCTAGGCCGCCGCCCTAGCCCTAGCTACTAGCTAGCTAGCTACTAGCTAGCTAGCTAGCCCTACTACTACTAGCCGCCCTAGCTACTACTACTAGCCCTAGCTAGCTAGCCCTACTACTACTAGCTAGCCCTACTAGCTAGCCGCCCTAGCTAGCTAGCTACTAGCCCTACTAGCCCTACTACTAGCTACTAGGCCCTAGGCCGCCCTAGCCCTAGGCCCTACTAGCTACTACTAGCTAGCTAGGCCGCCCTACTACTACTACTAGCTACTACTAGCTAGCTAGCCGCCCTAGCTAGGCCGCCGCCCTAGCTAGCTAGCTAGCTAGCTAGCTACTAGCTAGCTACTAGCTACTAGCCCTAGCTAGCTAGCTAGCTACTAGCTACTAGCTACTAGCCCTAGCCCTAGGCCGCCGCCGCCCTAGCTAGGCCCTAGCTAGCCGCCCTACTAGGCCCTAGCTAGCTACTAGGCCGCCGCCCTACTAGCTAGGCCGCCCTACTAGGCCCTAGCCCTACTAGCTACTAGCCGCCCTACTAGGCCCTAGCTAGCTACTAGCTACTACTAGCCGCCCTAGCCCTAGCTACTAGCTAGCCCTACTACTAGCTAGCTACTAGCTACTAGCCCTACTACTAGCCCTAGCTACTAGGCCCTAGCCGCCCTAGCCCTACTAGGCCGCCCTACTACTAGCCGCCCTACTAGGCCCTAGCTAGCTACTAGCTAGCCCTACTACTAGCTACTAGGCCCTAGCTACTAGCCCTAGCTACTAGCTAGCTAGGCCCTAGCTAGCTAGCTAGCTACTAGCTACTAGCTAGCTAGGCCCTACTAGCTACTAGGCCCTAGCTAGCCGCCCTAGCTAGCTAGCCCTAGCTAGGCCGCCGCCGCCCTACTAGCTACTACTAGCTAGCCGCCCTACTAGCCCTAGCTACTACTAGCTAGGCCGCCCTAGGCCCTACTAGCCCTAGCCCTACTAGCTAGGCCGCCCTAGGCCCTACTACTAGGCCGCCGCCCTACTAGCTAGCTAGCTAGCTAGCCCTACTAGGCCCTAGCCCTAGGCCCTACTACTAGCTAGCTACTACTAGGCCCTAGGCCCTACTAGCTAGCTACTAGCTAGGCCCTAGCTAGCTAGGCCCTAGCTACTAGCCGCCCTAGCTAGCTAGCCCTACTAGGCCCTAGGCCGCCCTACTAGCTAGCCGCCGCCCTAGGCCGCCCTAGCTACTAGCTAGCCGCCCTAGCTAGCTAGCCCTACTAGGCCCTAGCTAGCTAGCTAGGCCCTACTACTACTAGCCCTAGCTAGGCCCTACTAGCTACTAGCTACTAGGCCCTAGCCCTAGGCCGCCCTAGCTACTACTACTAGCCCTAGCTAGGCCCTAGCTAGCTAGCTACTACTAGCCGCCCTACTAGCCCGATTAGCTACTAGGCCGCCCTACTAGCTAGCTAGCTACTAGCTAG"
    testcases = [test1, test2, test3, test4, test5, test6, test7, test8, test9, test10, test11]

    for i, testcase in enumerate(testcases):
        print(f"Testcase {i + 1}")
        print("    상향식 접근 ", end = "")
        bottomup_result = dna_break_bottomup(testcase, patterns)        
        print(f"    상향식 접근 결과 : {bottomup_result}")
        print("    하향식 접근 ", end = "")
        topdown_result = dna_break_topdown_wrapper(testcase, patterns)
        print(f"    하향식 접근 결과 : {topdown_result}")
        print()
              
if __name__ == '__main__':
    main()